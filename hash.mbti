// Generated using `moon info`, DON'T EDIT IT
package "gmlewis/hash"

import(
  "gmlewis/io"
)

// Values

// Types and methods

// Type aliases

// Traits
pub(open) trait Hash {
  write(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  sum(Self, @io.Slice[Byte]) -> @io.Slice[Byte]
  reset(Self) -> Unit
  size(Self) -> Int
  block_size(Self) -> Int
}

pub(open) trait Hash32 {
  sum32(Self) -> UInt
  write(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  sum(Self, @io.Slice[Byte]) -> @io.Slice[Byte]
  reset(Self) -> Unit
  size(Self) -> Int
  block_size(Self) -> Int
}

pub(open) trait Hash64 {
  sum64() -> UInt64
  write(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  sum(Self, @io.Slice[Byte]) -> @io.Slice[Byte]
  reset(Self) -> Unit
  size(Self) -> Int
  block_size(Self) -> Int
}

