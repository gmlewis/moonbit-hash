package "gmlewis/hash/adler32"

import(
  "gmlewis/io"
)

// Values
fn checksum(@io.Slice[Byte]) -> UInt

fn marshal_binary(Digest) -> (@io.Slice[Byte], @io.IOError?)

fn new() -> Digest

fn unmarshal_binary(Digest, @io.Slice[Byte]) -> @io.IOError?

// Types and methods
type Digest
impl Digest {
  marshal_binary(Self) -> (@io.Slice[Byte], @io.IOError?)
  unmarshal_binary(Self, @io.Slice[Byte]) -> @io.IOError?
}
impl @gmlewis/hash.Hash32 for Digest

// Type aliases

// Traits

